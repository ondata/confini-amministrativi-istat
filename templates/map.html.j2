<!DOCTYPE html>
<html lang="{{ lang }}">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OnData - Confini Amministrativi ISTAT - /{{ path }}</title>

    <!-- Normalize CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css"
        integrity="sha512-NhSC1YmyruXifcj/KFRWoC561YpHpc5Jtzgvbuzx5VozKpWvQ+4nXhPdFgmx8xqexRcpAglTj9sIBWINXa8x5w=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <!-- Leaflet -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css"
        integrity="sha512-h9FcoyWjHcOcmEVkxOfTLnmZFWIH0iZhZT1H2TbOq55xssQGEJHEaIm+PgoUaZbRvQTNTluNOEfb1ZRy6D3BOw=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"
        integrity="sha512-puJW3E/qXDqYp9IfhAI54BJEaWIfloJ7JWs7OeD5i6ruC9JZL1gERT1wjtwXFlh7CjE7ZJ+/vcRZRkIYIb6p4g=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <!-- Leaflet Easy Button -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.EasyButton/2.4.0/easy-button.min.js"
        integrity="sha512-Tndo4y/YJooD/mGXS9D6F1YyBcSyrWnnSWQ5Z9IcKt6bljicjyka9qcP99qMFbQ5+omfOtwwIapv1DjBCZcTJQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <!-- Custom style -->
    <style>
        #map {
            width: 100vw;
            height: 100vh;
            overflow: hidden;
        }

        h1 {
            text-align: center;
        }

        th {
            text-align: right;
        }

        th::after {
            content: ":";
        }

        .leaflet-touch .leaflet-bar.easy-button-container a {
            width: auto;
            padding: 0 1em;
        }
    </style>
</head>

<body>
    <div id="map"></div>

    <!-- Custom script -->
    <script>
        (async function () {

            // GeoJSON file name
            const filename = "../{{ filename }}";

            // Leaflet map initialization
            const map = L.map('map').setView([42.5206995, 13.2275392], 6);

            // Tile layer loading
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);

            // Watermark
            L.Control.Watermark = L.Control.extend({
                onAdd: function (map) {
                    var img = L.DomUtil.create('img');
                    img.src = 'https://www.ondata.it/wp-content/uploads/2022/03/logo-onData-corretto-trasparente.png';
                    img.style.width = '125px';
                    return img;
                }
            });

            L.control.watermark = function (opts) {
                return new L.Control.Watermark(opts);
            }

            L.control.watermark({ position: 'bottomleft' }).addTo(map);

            // Download buttons
            {% for btn in downloads %}
            L.easyButton('<a href="../{{ btn.filename }}" download="{{ btn.filename }}">{{ btn.name }}</a>', function (btn, map) {
                open("../{{ btn.filename }}");
            }).addTo(map);
            {% endfor %}

            // Fetch GeoJSON data
            const response = await fetch(filename);
            const geojson = await response.json();

            // Layer loading
            const layer = L.geoJson(
                geojson,
                {
                    style: function (feature) {
                        return {
                            color: "#EB593C",
                            weight: 2,
                            fillColor: "#2E85D1",
                            fillOpacity: 0.66
                        };
                    }
                }
            ).bindPopup(function (layer) {
                return `
                    <h1>${layer.feature.properties["{{ key }}"]}</h1>
                    <table>
                        ${Object.entries(layer.feature.properties).sort(([a], [b]) => a.localeCompare(b)).map(([k, v]) => `<tr><th>${k}</th><td>${v}</td></tr>`).join("\n")}
                    </table>
                `;
            }).addTo(map);

            // Adapt map zoom and pan
            map.fitBounds(layer.getBounds());
        })();
    </script>
</body>

</html>